{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mcp",
        "responseMode": "onReceived"
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extrae el mensaje del formato MCP y construye un prompt detallado\nconst mcp = items[0].json;\nconst userInput = mcp.input || mcp.query || mcp.message || \"Información general\";\n\nconst detailedPrompt = `Eres un agente de viajes IA experto. El usuario te proporcionará una solicitud de búsqueda de vuelos en lenguaje natural.\nTu objetivo es analizar su solicitud y devolver los resultados de vuelos en una tabla Markdown.\nLa tabla debe incluir las columnas: Aerolínea, Precio (USD), Duración Total, Escalas, Ruta.\nPrioriza la información más económica y asegúrate de que la respuesta sea únicamente la tabla Markdown.\n\nSolicitud del usuario: \"${userInput}\"\n\nProporciona únicamente la tabla Markdown como respuesta, comenzando con la cabecera de la tabla (ej. | Aerolínea | Precio...).`;\n\nreturn [{\n  json: {\n    prompt: detailedPrompt\n  }\n}];"
      },
      "id": "Function1",
      "name": "MCP a Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:generateContent?key=AIzaSyDUHQl-jRi8xtd3nL-2J662lS_iv4MXitA",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "{\n  \"contents\": [\n    {\n      \"parts\": [\n        { \"text\": \"{{$json.prompt}}\" }\n      ]\n    }\n  ]\n}"
      },
      "id": "HTTPRequest",
      "name": "Gemini API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "functionCode": "// Adapta la respuesta de Gemini al formato MCP con mejor manejo de errores\nconst geminiResponse = items[0].json;\nlet outputText = \"No se pudo obtener una respuesta clara de la IA. Por favor, intenta reformular tu pregunta o verifica la configuración.\"; // Mensaje por defecto mejorado\n\nif (geminiResponse.candidates && geminiResponse.candidates.length > 0 &&\n    geminiResponse.candidates[0].content &&\n    geminiResponse.candidates[0].content.parts &&\n    geminiResponse.candidates[0].content.parts.length > 0 &&\n    geminiResponse.candidates[0].content.parts[0].text) {\n  outputText = geminiResponse.candidates[0].content.parts[0].text;\n} else if (geminiResponse.error) {\n  // Si Gemini devuelve un objeto de error explícito\n  outputText = `Error de la IA: ${geminiResponse.error.message || JSON.stringify(geminiResponse.error)}`;\n  // Adicionalmente, podrías querer registrar el error completo en n8n para depuración:\n  // console.error(\"Error de la API de Gemini:\", JSON.stringify(geminiResponse.error));\n} else {\n  // Si la estructura no es la esperada, pero no hay un error.error explícito\n  // Registrar la respuesta completa para depuración puede ser útil aquí.\n  // console.warn(\"Respuesta inesperada de Gemini:\", JSON.stringify(geminiResponse));\n  // Mantener el mensaje por defecto o uno más específico:\n  outputText = \"La IA devolvió una respuesta en un formato inesperado. Intenta reformular tu pregunta.\";\n}\n\nreturn [{\n  json: {\n    output: outputText,\n    mcp: true\n  }\n}];"
      },
      "id": "Function2",
      "name": "Respuesta MCP",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "responseData": "firstInputItem",
        "responseCode": 200
      },
      "id": "RespondToWebhook",
      "name": "Responder Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "MCP a Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP a Prompt": {
      "main": [
        [
          {
            "node": "Gemini API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini API": {
      "main": [
        [
          {
            "node": "Respuesta MCP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respuesta MCP": {
      "main": [
        [
          {
            "node": "Responder Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}